/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from 'react'
import { useGLTF, ContactShadows } from '@react-three/drei'

export default function Model(props) {
    const group = useRef()
    const { nodes } = useGLTF('/plantnomat.gltf')

    // materials

    const threeTone = new THREE.TextureLoader().load('gradientMaps/threeTone.jpg')
    threeTone.minFilter = THREE.NearestFilter
    threeTone.magFilter = THREE.NearestFilter
    threeTone.generateMipmaps = false;

    const fourTone = new THREE.TextureLoader().load('gradientMaps/fourTone.jpg')
    fourTone.minFilter = THREE.NearestFilter
    fourTone.magFilter = THREE.NearestFilter
    fourTone.generateMipmaps = false;

    const fiveTone = new THREE.TextureLoader().load('gradientMaps/fiveTone.jpg')
    fiveTone.minFilter = THREE.NearestFilter
    fiveTone.magFilter = THREE.NearestFilter
    fiveTone.generateMipmaps = false;

    const terracottaMat = new THREE.MeshToonMaterial({
        color: new THREE.Color("#e6764e"),
        gradientMap: {
            Default: null,
            threeTone: 'threeTone',
            fourTone: 'fourTone',
            fiveTone: 'fiveTone',
        }
    });
    terracottaMat.gradientMap = fourTone;
    
    const plantMat = new THREE.MeshToonMaterial({
        color: new THREE.Color("#8aa42f"),
        gradientMap: {
            Default: null,
            threeTone: 'threeTone',
            fourTone: 'fourTone',
            fiveTone: 'fiveTone',
        }
    });
    plantMat.gradientMap = threeTone;
    plantMat.side = THREE.DoubleSide;

    const treeMat = new THREE.MeshToonMaterial({
        color: new THREE.Color("#543d2a"),
        gradientMap: {
            Default: null,
            threeTone: 'threeTone',
            fourTone: 'fourTone',
            fiveTone: 'fiveTone',
        }
    });
    treeMat.gradientMap = fiveTone;

    const dirtMat = new THREE.MeshToonMaterial({
        color: new THREE.Color("#302520"),
        gradientMap: {
            Default: null,
            threeTone: 'threeTone',
            fourTone: 'fourTone',
            fiveTone: 'fiveTone',
        }
    });
    dirtMat.gradientMap = fiveTone;


    // Shadow catcher
    const floor = new THREE.PlaneGeometry(100, 100);
    floor.rotateX(-Math.PI/2)
    floor.translate(0, -11.5, 0);


    return (
    <group ref={group} {...props} dispose={null} >

        <pointLight position={[30, 70, 20]} intensity={0.3} castShadow />
        <pointLight position={[-15, 15, -15]} intensity={0.05} />
        <pointLight position={[50, 90, -30]} intensity={0.1} castShadow />

        {/* LIGHT HELPERS XD */}
        {/* <mesh position={[30, 70, 20]} >
            <boxGeometry args={[8,12,8]} />
            <meshStandardMaterial />
        </mesh>
        <mesh position={[-15, 15, -15]} >
            <boxGeometry args={[2,2,2]} />
            <meshStandardMaterial />
        </mesh>
        <mesh position={[50, 70, -30]} >
            <boxGeometry args={[5,1,5]} />
            <meshStandardMaterial />
        </mesh> */}

        <group position={[0.72, 14.1, -1.1]} >
            <mesh
            castShadow
            geometry={nodes.leafs.geometry}
            material={plantMat}
            position={[2.15, 13.75, -2.49]}
            />
            <mesh
            castShadow
            geometry={nodes.trunk.geometry}
            material={treeMat}
            position={[-0.72, -4.63, 0.3]}
            />
            <mesh
            castShadow
            geometry={nodes.dirt.geometry}
            material={dirtMat}
            position={[-0.72, -2.17, 1.1]}
            />
            <mesh
            castShadow
            geometry={nodes.pot.geometry}
            material={terracottaMat}
            position={[-0.69, -6.95, 1.07]}
            />

            {/* shadowcatcher */}
            <mesh geometry={floor} receiveShadow>
                <shadowMaterial transparent opacity={0.15} />
            </mesh>
        </group>
    </group>
  )
}

useGLTF.preload('/plantnomat.gltf')